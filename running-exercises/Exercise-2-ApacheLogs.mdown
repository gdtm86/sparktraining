
NASA: Web Server Log Analysis
==============================

This exercise consists of 4 parts:

* Part 1: Apache WebServer log file format
* Part 2: Sample Analyses on the Web Server Log File
* Part 3: Analyzing WebServer Log File
* Part 4: Exploring 404 Response Code


### Part 1: Apache Web Server Log file format

(1a) Parsing Each Log Line


Define a function to parse Apache logs using the Regex.

You can learn more about the log format at [Apache Common Log Format](http://httpd.apache.org/docs/1.3/logs.html#common)

```
[gmedasani@intel-1 intel]$ cat ApacheLogParserUtilNew.scala
import java.util.regex.{Pattern}

object ApacheLogParserUtilNew extends Serializable {

  val APACHE_ACCESS_LOG_PATTERN = """^(\S+) (\S+) (\S+) \[([\w:/]+\s[+\-]\d{4})\] "(\S+) (\S+)\s*(\S*)" (\d{3}) (\S+)"""

  def parseRecord(logline: String):(String, String, String, String, String, String, String, String, String)= {
    val compiledPattern = Pattern.compile(APACHE_ACCESS_LOG_PATTERN)
    val matcher = compiledPattern.matcher(logline)
    if (matcher.find) {
       (matcher.group(1),
        matcher.group(2),
        matcher.group(3),
        matcher.group(4),
        matcher.group(5),
        matcher.group(6),
        matcher.group(7),
        matcher.group(8),
        matcher.group(9))
    } else {
      (logline,"failed"," "," "," "," "," "," ","")
    }
  }
}

[gmedasani@intel-1 intel]$
```

```
scala> :load /data/intel/ApacheLogParserUtilNew.scala
Loading /data/intel/ApacheLogParserUtilNew.scala...
import java.util.regex.Pattern
defined module ApacheLogParserUtilNew

scala> val logsRDD  = sc.textFile("data/exercises-data/apache.access.log")
logsRDD: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[1] at textFile at <console>:21

scala> logsRDD.map(logline => ApacheLogParserUtilNew.parseRecord(logline)).take(10)
res3: Array[(String, String, String, String, String, String, String, String, String)] = Array((in24.inetnebr.com,-,-,01/Aug/1995:00:00:01 -0400,GET,/shuttle/missions/sts-68/news/sts-68-mcc-05.txt,HTTP/1.0,200,1839), (uplherc.upl.com,-,-,01/Aug/1995:00:00:07 -0400,GET,/,HTTP/1.0,304,0), (uplherc.upl.com,-,-,01/Aug/1995:00:00:08 -0400,GET,/images/ksclogo-medium.gif,HTTP/1.0,304,0), (uplherc.upl.com,-,-,01/Aug/1995:00:00:08 -0400,GET,/images/MOSAIC-logosmall.gif,HTTP/1.0,304,0), (uplherc.upl.com,-,-,01/Aug/1995:00:00:08 -0400,GET,/images/USA-logosmall.gif,HTTP/1.0,304,0), (ix-esc-ca2-07.ix.netcom.com,-,-,01/Aug/1995:00:00:09 -0400,GET,/images/launch-logo.gif,HTTP/1.0,200,1713), (uplherc.upl.com,-,-,01/Aug/1995:00:00:10 -0400,GET,/images/WORLD-logosmall.gif,HTTP/1.0,304,0), (slppp6.intermin...
scala>

```

```
scala> val month_map = Map(("Jan",1),("Feb", 2),("Mar",3),("Apr",4),("May",5),("Jun",6),("Jul",7),("Aug",8),("Sep", 9), ("Oct",10),("Nov",11),("Dec",12))
month_map: scala.collection.immutable.Map[String,Int] = Map(Nov -> 11, Jul -> 7, Mar -> 3, Jan -> 1, Oct -> 10, Dec -> 12, Feb -> 2, May -> 5, Apr -> 4, Aug -> 8, Sep -> 9, Jun -> 6)

```

```

```
